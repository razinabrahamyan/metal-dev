/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*******************************************************!*\
  !*** ./resources/user_assets/js/postCreateHandler.js ***!
  \*******************************************************/
new Vue({
  el: "#create_post_form",
  data: {
    images: null,
    timeoutQuery: null,
    addressGeoTimeout: null,
    needSearch: false,
    showGeoPointsForm: false,
    address: '',
    yandexAddresses: [],
    lat: '',
    lng: '',
    mainCategoryBoxes: [{
      counter: 0,
      subcategories: [{
        counter: 1,
        subcategory: null,
        price: null
      }],
      allowedSubcategories: {},
      chosenSubcategories: {},
      category: null
    }],
    mainCategories: {},
    chosenCategories: {},
    counter: 2,

    /*services:[],
    selectedServices:[],*/
    isDisabled: false
  },
  watch: {
    address: function address(value) {
      this.getYandexAddresses(value);
    },
    mainCategoryBoxes: function mainCategoryBoxes(newVal) {}
  },
  methods: {
    canAddSubcategories: function canAddSubcategories(index) {
      var allowed_catgeories = this.mainCategoryBoxes[index].allowedSubcategories;
      return this.mainCategoryBoxes[index].subcategories.length < this.objectSize(allowed_catgeories);
    },
    canAddCategories: function canAddCategories() {
      var allowed_catgeories = this.mainCategories;
      return this.mainCategoryBoxes.length < this.objectSize(allowed_catgeories);
    },
    subcategorySelectCheck: function subcategorySelectCheck(cat_id, select_id, category_div_index) {
      return !this.mainCategoryBoxes[category_div_index].chosenSubcategories.hasOwnProperty(cat_id) || this.mainCategoryBoxes[category_div_index].chosenSubcategories[cat_id] == select_id;
    },
    categorySelectCheck: function categorySelectCheck(cat_id, select_id) {
      return !this.chosenCategories.hasOwnProperty(cat_id) || this.chosenCategories[cat_id] == select_id;
    },
    subcategoryPriceChange: function subcategoryPriceChange(e) {
      var input_value = e.target.value;
      var category_div_index = e.target.getAttribute('data-index');
      var category_div_subindex = e.target.getAttribute('data-subindex');
      this.mainCategoryBoxes[category_div_index].subcategories[category_div_subindex].price = input_value;
    },
    onCategorySelectChange: function onCategorySelectChange(e) {
      var category_div_index = e.target.getAttribute('data-index');
      var category_select_id = e.target.getAttribute('data-id');
      var selected_value = e.target.value;
      var new_category_box = this.mainCategoryBoxes[category_div_index];
      new_category_box.category = selected_value;
      new_category_box.allowedSubcategories = this.mainCategories[selected_value].allowedCategories;
      new_category_box.chosenSubcategories = {};
      new_category_box.subcategories = [{
        counter: this.counter,
        subcategory: null,
        price: null
      }];
      new_category_box.category = null;
      this.mainCategoryBoxes[category_div_index] = new_category_box;
      this.counter += 1;
      var chosenCategoriesArr = this.chosenCategories;
      var check = this.findValue(chosenCategoriesArr, category_select_id);

      if (check) {
        delete chosenCategoriesArr[check];
      }

      chosenCategoriesArr[selected_value] = category_select_id;
      this.chosenCategories = chosenCategoriesArr;
      this.$forceUpdate();
    },
    onSubcategorySelectChange: function onSubcategorySelectChange(e) {
      var subcategory_select_id = e.target.getAttribute('data-id');
      var category_div_index = e.target.getAttribute('data-index');
      var category_div_subindex = e.target.getAttribute('data-subindex');
      var selected_value = e.target.value;
      var chosenSubcategories = this.mainCategoryBoxes[category_div_index].chosenSubcategories;
      this.mainCategoryBoxes[category_div_index].subcategories[category_div_subindex].subcategory = selected_value;
      var check = this.findValue(chosenSubcategories, subcategory_select_id);

      if (check) {
        delete chosenSubcategories[check];
      }

      chosenSubcategories[selected_value] = subcategory_select_id;
      this.mainCategoryBoxes[category_div_index].chosenSubcategories = chosenSubcategories;
      this.$forceUpdate();
    },
    findValue: function findValue(o, value) {
      for (var prop in o) {
        if (o.hasOwnProperty(prop) && o[prop] == value) {
          return prop;
        }
      }

      return false;
    },
    addCategory: function addCategory() {
      var id = null;
      var allowed_categories = {};

      if (this.objectSize(this.chosenCategories) === this.objectSize(this.mainCategories) - 1) {
        id = this.getDifferenceId(this.chosenCategories, this.mainCategories);
        this.chosenCategories[id] = this.counter;
        allowed_categories = this.mainCategories[id].allowedCategories;
      }

      var newCategoryObject = {
        counter: this.counter,
        subcategories: [{
          counter: this.counter + 1,
          subcategory: null,
          price: null
        }],
        allowedSubcategories: allowed_categories,
        chosenSubcategories: {},
        category: id
      };
      this.counter += 2;
      this.mainCategoryBoxes.push(newCategoryObject);
    },
    addSubCategory: function addSubCategory(index) {
      var category_box = this.mainCategoryBoxes[index];
      var id = null;

      if (this.objectSize(category_box.chosenSubcategories) === this.objectSize(category_box.allowedSubcategories) - 1) {
        id = this.getDifferenceId(category_box.chosenSubcategories, category_box.allowedSubcategories);
        category_box.chosenSubcategories[id] = this.counter;
      }

      category_box.subcategories.push({
        counter: this.counter,
        subcategory: id,
        price: null
      });
      this.mainCategoryBoxes[index] = category_box;
      this.counter += 1;
    },
    getDifferenceId: function getDifferenceId(selectedObj, allowedObj) {
      for (key in allowedObj) {
        if (allowedObj.hasOwnProperty(key)) {
          if (!selectedObj.hasOwnProperty(key)) {
            return key;
          }
        }
      }

      return null;
    },
    objectSize: function objectSize(object) {
      var size = 0,
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) size++;
      }

      return size;
    },
    removeSubcategory: function removeSubcategory(category_index, subcategory_index, data_id, main_cat_id) {
      if (this.mainCategoryBoxes[category_index].subcategories.length > 1 || this.mainCategoryBoxes.length > 1) {
        var arr = this.mainCategoryBoxes[category_index].subcategories;

        if (arr.length > 1) {
          var chosenSubcategories = this.mainCategoryBoxes[category_index].chosenSubcategories;
          var check = this.findValue(chosenSubcategories, data_id);

          if (check) {
            delete chosenSubcategories[check];
          }

          this.mainCategoryBoxes[category_index].chosenSubcategories = chosenSubcategories;
          this.mainCategoryBoxes[category_index].subcategories.splice(subcategory_index, 1);
          this.$forceUpdate();
        } else {
          var chosenCategories = this.chosenCategories;

          var _check = this.findValue(chosenCategories, main_cat_id);

          if (_check) {
            delete chosenCategories[_check];
          }

          this.chosenCategories = chosenCategories;
          this.mainCategoryBoxes.splice(category_index, 1);
        }
      }
    },
    mll: function mll() {},
    createPost: function createPost(e) {
      var _this = this;

      e.preventDefault();
      this.isDisabled = true;
      var config = {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'multipart/form-data'
        }
      };
      var data = new FormData(e.target);
      data.append('files', this.images);
      axios.post('/axios/post/create', data, config).then(function (response) {
        if (Object.keys(response.data.invalidRules).length > 0) {
          _this.isDisabled = false;
          DomHelpers.scrollToElement(Object.keys(response.data.invalidRules)[0], '.add-listing-section');
          $.each(response.data.invalidRules, function (selector, message) {
            AlertNotification.appendElementError(selector, message[0]);
          });
        } else {
          window.location.href = response.data.redirectTo;
        }
      })["catch"](function (e) {
        _this.isDisabled = false;
        console.log(e);
      });
    },
    onFileChange: function onFileChange(e) {
      this.images = e.target.files;
    },
    getAddresses: function getAddresses() {
      var _this2 = this;

      axios.post('/axios/decode-address', {
        'address': this.address
      }).then(function (response) {
        var data = response.data;
        _this2.lat = data.latitude;
        _this2.lng = data.longitude;
        _this2.showGeoPointsForm = !data.latitude || !data.longitude;
      })["catch"](function (e) {
        console.log(e);
      });
    },
    getYandexAddresses: function getYandexAddresses(value) {
      var _this3 = this;

      if (this.timeoutQuery) {
        clearTimeout(this.timeoutQuery);
      }

      this.timeoutQuery = setTimeout(function () {
        if (value !== '') {
          var _ref;

          //очищаем содержимое блока с подсказкой
          _this3.yandexAddresses = [];
          var yandexAddressesResult = [];
          var city = (_ref = $('#city').val() + ',') !== null && _ref !== void 0 ? _ref : $('#city').val();
          ymaps.suggest(city + value).then(function (items) {
            //заполняем содержимое блока с подсказкой
            if (items.length > 0) {
              $.each(items, function (key, value) {
                yandexAddressesResult.push(value.displayName);
              });
            }
          });
          _this3.yandexAddresses = yandexAddressesResult;
        } else {
          //если пустая строка - скрываем блок с подсказкой
          _this3.needSearch = false;
          _this3.lat = _this3.lng = '';
        }
      }, 500);
    },
    selectAddress: function selectAddress(value) {
      this.address = value;
      this.needSearch = false;
      this.getAddresses();
    },
    searchAddress: function searchAddress() {
      var _this4 = this;

      this.needSearch = true;

      if (this.addressGeoTimeout) {
        clearTimeout(this.addressGeoTimeout);
      }

      this.addressGeoTimeout = setTimeout(function () {
        _this4.getAddresses();
      }, 500);
    }
    /*onServiceCheckboxChecked: function (e){
        console.log(e.target.value)
    }*/

  },
  created: function created() {
    var _this5 = this;

    axios.get('/axios/get-categories').then(function (response) {
      var main_obj = _this5.mainCategories;
      response.data.categories.forEach(function (value) {
        var subcat_obj = {};
        value.subcategories.forEach(function (subcat) {
          subcat_obj[subcat.id] = {
            id: subcat.id,
            title: subcat.title
          };
        });
        main_obj[value.id] = {
          id: value.id,
          title: value.title,
          allowedCategories: subcat_obj
        };
      });
      _this5.mainCategories = main_obj;
      /*
                  let mainServices = this.services;
                  response.data.services.forEach(function (value){
                      mainServices.push({
                          id:value.id,
                          title:value.title
                      })
                  })
                  this.services = mainServices;*/

      _this5.$forceUpdate();
    })["catch"](function (e) {
      console.log(e);
    });
  },
  mounted: function mounted() {
    phoneHandler.addMask();
  },
  updated: function updated() {// console.log(this.mainCategoryBoxes)
  }
});

function makeChosen() {
  $(".chosen-select").chosen({
    disable_search_threshold: 200,
    max_selected_options: 1,
    allow_single_deselect: true,
    width: '100%'
  });
  return true;
}

$.fn.isInViewport = function () {
  var elementTop = $(this).offset().top;
  var viewportTop = $(window).scrollTop();
  return elementTop > viewportTop + 85 && elementTop < viewportTop + 200;
};

var CURRENT_ITEM = null;
$(document).on('scroll', function () {
  $('.ls-widget').each(function () {
    if ($(this).isInViewport() && CURRENT_ITEM !== $(this).attr('id')) {
      var ID = $(this).attr('id');
      $('.ls-widget').removeClass('active');
      $(this).addClass('active');
      $('.listing-content-list li').removeClass('active');
      $('.listing-content-list li[data-target="#' + ID + '"]').addClass('active');
      CURRENT_ITEM = $(this).attr('id');
    }
  });
});
$('.working_title_button').click(function () {
  if ($(this).parent().hasClass('active')) {
    $(this).parent().removeClass('active');
  } else {
    $('.time-table-block').removeClass('active');
    $(this).parent().addClass('active');
  }
});
$('.delete_worktime_button').click(function () {
  var parent_elem = $(this).parents('.time-table-block');
  parent_elem.animate({
    opacity: 0
  }, 300, function () {
    parent_elem.remove();
  });
});
$("input.post_images").MultiFile({
  list: ".file-upload-previews-create"
});
$("input.post_cover").MultiFile({
  list: ".file-upload-cover-create"
});
/******/ })()
;